{"pages":[{"title":"Getting Started","text":"Add &quot;lainga9\/balldeep&quot;: &quot;dev-master&quot; to composer.json For local setup also add &quot;repositories&quot;: [ { &quot;type&quot;: &quot;path&quot;, &quot;url&quot;: &quot;..\/packages\/lainga9\/balldeep\/&quot;, &quot;options&quot;: { &quot;symlink&quot;: true } } ] and &quot;autoload-dev&quot;: { &quot;psr-4&quot;: { &quot;Tests\\\\&quot;: &quot;tests\/&quot;, &quot;Lainga9\\\\BallDeep\\\\&quot;: &quot;..\/packages\/lainga9\/balldeep\/src&quot; } } to composer.json and run composer update if the requirements cannot be resolved try adding &quot;minimum-stability&quot;: &quot;dev&quot; to main project's composer.json file. After installation is complete, run the following: php artisan package:discover php artisan vendor:publish --provider=&quot;Lainga9\\BallDeep\\BallDeepServiceProvider&quot; --force php artisan vendor:publish --tag=&quot;bouncer.migrations&quot; php artisan vendor:publish --provider=&quot;Spatie\\MediaLibrary\\MediaLibraryServiceProvider&quot; --tag=&quot;migrations&quot; php artisan vendor:publish --provider=&quot;Spatie\\MediaLibrary\\MediaLibraryServiceProvider&quot; --tag=&quot;config&quot; php artisan migrate composer dump-auto php artisan db:seed --class=&quot;BdPostTypesTableSeeder&quot; php artisan db:seed --class=&quot;BdRolesTableSeeder&quot; php artisan storage:link Add 'balldeep' =&gt; [ 'driver' =&gt; 'session', 'provider' =&gt; 'balldeep', ], to guards array and 'balldeep' =&gt; [ 'driver' =&gt; 'eloquent', 'model' =&gt; Lainga9\\BallDeep\\app\\User::class, ], to providers array in config\/auth.php. Add Lainga9\\BallDeep\\app\\BallDeep::class to aliases array in config\/app.php Add styles to head of main project's layout file BallDeep::styles()","tags":"","url":"Getting_Started.html"},{"title":"Setup","text":"To run setup you can optionally run php artisan balldeep:setup To set the name of the layout file which your app uses update the 'layout' value in config\/balldeep.php","tags":"","url":"Setup.html"},{"title":"Displaying a Form","text":"Forms can be displayed on the frontend using the function BallDeep::form($id, $title = true) where $id is the ID of the form and $title is whether or not you would like to display the title.","tags":"","url":"Forms\/Displaying_a_Form.html"},{"title":"Notifications","text":"By default, when you create a new form a notification will be created which sends all fields to the first admin user in the database. As many other notifications as required can be added","tags":"","url":"Forms\/Notifications.html"},{"title":"Overview","text":"The media library uses the https:\/\/github.com\/spatie\/laravel-medialibrary package. There are a whole host of configuration options which can be set in config\/medialibrary.php","tags":"","url":"Media\/Overview.html"},{"title":"Image Sizes","text":"When uploading an image, extra image sizes can optionally be generated. This is handy for things like thumbnails etc. These sizes are defined in config\/balldeep.php in the 'image_sizes' array. The key of the entry should be the name of the image size and the value should be an array of width and then height. For example, 'image_sizes' =&gt; [ 'banner' =&gt; [648, 60] ] By default, a thumbnail image is generated with dimensions 320x240.","tags":"","url":"Media\/Image_Sizes.html"},{"title":"File Paths","text":"By default, files will be uploaded to the path 'uploads\/media' in your chosen filesystem. This can be modified by updating the 'media_upload_directory' config value in config\/balldeep.php","tags":"","url":"Media\/File_Paths.html"},{"title":"Displaying a Menu","text":"Menus can be displayed on the frontend using the function BallDeep::menu($menuName, $params = []) where $menuName is the name given to the menu when it was created. The available parameters which can be passed are: container_class CSS class to add to the &lt;nav&gt; element menu_class CSS class to be added to the &lt;ul&gt; element item_class CSS class to be added to the &lt;li&gt; element link_class CSS class to be added to the &lt;a&gt; element","tags":"","url":"Menus\/Displaying_a_Menu.html"},{"title":"Creating Post Types","text":"Two default post types are created automatically: post page New post types can be created using the artisan command: php artisan balldeep:posttype","tags":"","url":"Post_Types\/Creating_Post_Types.html"},{"title":"Methods","text":"The post model has the following methods available to use in templates: title() returns the title of the post - string content() returns the content of the post - string url() returns the link to view the post - string excerpt() returns the excerpt (short version of the content) for the post - string meta($key) returns any additional meta which has been attached to the post - mixed publishedAt($format = 'dS M y g:ia') returns the date on which the post was initially published - string updatedAt($format = 'dS M y g:ia') returns the date on which the post was last updated - string","tags":"","url":"Post_Types\/Methods.html"},{"title":"Relationships","text":"The post model has the following relationships available: $post-&gt;children returns any children of the post if the post's type is hierarchical - Collection (of Post models) $post-&gt;taxonomies returns any taxonomies which the post is associated with - Collection (of Taxonomy models) $post-&gt;metas returns all meta data which has been attached to the post - Collection (of PostMeta models)","tags":"","url":"Post_Types\/Relationships.html"},{"title":"Routes","text":"A route with the plural of any post type is added automatically e.g. site.test\/content\/posts The prefix 'content' can be changed by updating the 'content_prefix' config value in config\/balldeep.php. If you would like to have a unique route for the post type index then you can add an entry to the 'post_type_urls' array in config\/balldeep.php. So, for example, to add a blog\/ url you could add 'post_type_urls' =&gt; [ 'post' =&gt; 'blog' ]","tags":"","url":"Post_Types\/Routes.html"},{"title":"Views","text":"Default Views Views are published to resources\/views\/vendor\/balldeep\/ and can be edited here. Custom Views Custom views can be created by adding a directory in your views directory with the plural name of the post type and index.blade.php for the index page and show.blade.php for the single. For example for a post type with name 'page' you would add: pages\/ |__index.blade.php \/\/ Show all pages |__show.blade.php \/\/ Show single page The index view is passed a Collection of Post models and the single view is passed a Post model. Both views are passed the PostType model. Category views can be overridden by adding a folder named the taxonomy name within the corresponding post type folder e.g. \/posts\/sport\/index.blade.php Posts Per Page By default, 9 posts per page are shown for all post types on the index view but this can be updated by adding an entry to the 'posts_per_page' array in config\/balldeep.php. The key should be the singular name of the post type and the value should be the desired number of posts per page.","tags":"","url":"Post_Types\/Views.html"},{"title":"Sitemaps","text":"Sitemaps are generated using this package https:\/\/github.com\/Laravelium\/laravel-sitemap Command: php artisan balldeep:generate-sitemap {models*} where models are a list of fully namespaced models which you would like added to the sitemap e.g. php artisan balldeep:generate-sitemap App\\\\Page App\\\\Post Setup Define a method on the required models as follows: public function getSitemapUrl() { \/\/ Return the URL which should be added to the sitemap return $this-&gt;url; } An updated_at timestamp column in the model's table is also required.","tags":"","url":"SEO\/Sitemaps.html"},{"title":"Meta Tags","text":"Adding SEO Meta Fields Standard SEO meta fields can be added to given post types by using the following command php artisan balldeep:seo-meta {types*} where types are a space-separated list of post type slugs. This command will attached the following meta fields to the post types specified: Meta Title The value which should be passed to the &lt;title&gt; tag. Will default to post title if not specified. Meta Description The content to pass to the &lt;meta name=&quot;description&quot;&gt; tag. Will default to post excerpt if not specified. Social Title The title to pass to facebook and twitter meta tags. Will default to the meta title if not specified. Social Description The description to pass to facebook and twitter meta tags. Will default to the meta description if not specified. The post's featured image will also be added to the facebook and twitter tags by default. Outputting Meta To output the social meta on the frontend you can use the following methods which are defined on the Post model: $post-&gt;facebookMeta() and $post-&gt;twitterMeta() The meta title and description can be accessed by using: $post-&gt;metaTitle() and $post-&gt;metaDescription()","tags":"","url":"SEO\/Meta_Tags.html"}]}